#!/usr/bin/python3
import argparse
import inspect
import cmd
import sys
import os


try:
    import PyWordReference
except Exception as e:
    module_path = os.path.join(
                      os.path.dirname(
                         os.path.abspath(inspect.getsourcefile(lambda:0))),
                                         "PyWordReference-submodule")
    sys.path.append(module_path)
    import PyWordReference


class DictionaryShell(cmd.Cmd):
    intro = 'Welcome to the turtle shell.   Type help or ? to list commands.\n'
    prompt = '(dictionary) '
    file = None

    def __find_wr_trans(self, _from, _to, arg):
        """Run Transation using Wordreference"""
        w = PyWordReference.Translator()
        res = w.search(_from, _to, arg)
        print("Copyright WordReference: {url}".format(url=res["url"]))
        for t in res["translation"]:
            print(str(t).encode('ascii', 'ignore').decode("ascii"))

    def find_wr_enit(self, arg):
        """Find function from English to Italian using Wordreference"""
        self.__find_wr_trans("en", "it", arg)

    def find_wr_iten(self, arg):
        """Find function from Italian to English using Wordreference"""
        self.__find_wr_trans("it", "en", arg)

    dictionaries = {
        "wr-enit" : {
            "name": "wr-enit",
            "description": "Translate English to Italian using WordReference",
            "find": find_wr_enit,
        },
        "wr-iten" : {
            "name": "wr-iten",
            "description": "Translate Italian to English using WordReference",
            "find": find_wr_iten,
        },
    }

    def __init__(self, wr_api_key=None):
        self.current_dictionary = "N/A"
        self.wr_api_key = wr_api_key
        super(DictionaryShell, self).__init__()

    def do_quit(self, arg):
        """quit, q: exit from this program"""
        return True

    do_EOF = do_quit
    do_q = do_quit

    def do_list(self, arg):
        """list, l: list all available dictionaries"""
        for d in self.dictionaries:
            print("{name}: {description}".format(**self.dictionaries[d]))

    do_l = do_list

    def do_select(self, arg):
        """select,s: select the dictionary to use"""
        if arg in self.dictionaries:
            self.current_dictionary = arg
        else:
            print("Dictionary \"{}\" does not exist".format(arg))

    do_s = do_select

    def do_current(self, arg):
        """current, c: show current dictionary"""
        print(self.current_dictionary)

    do_c = do_current

    def do_find(self, arg):
        """find, f: find a word in the current dictionary"""
        if " " in arg:
            print("For the time being this program support only single words")
            return False
        self.dictionaries[self.current_dictionary]["find"](self, arg)

    do_f = do_find

    do_h = cmd.Cmd.do_help


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--wr-api-key', dest='api_key', default=None,
                    help='WordReference API key')
    args = parser.parse_args()

    if args.api_key is None and 'WR_API_KEY' in os.environ:
        args.api_key = os.environ['WR_API_KEY']

    DictionaryShell(wr_api_key=args.api_key).cmdloop()
